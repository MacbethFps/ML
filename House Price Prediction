{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/devaanshpuri/house-price-prediction?scriptVersionId=203921313\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error","metadata":{"execution":{"iopub.status.busy":"2024-10-28T13:05:53.94186Z","iopub.execute_input":"2024-10-28T13:05:53.942286Z","iopub.status.idle":"2024-10-28T13:05:53.950294Z","shell.execute_reply.started":"2024-10-28T13:05:53.942247Z","shell.execute_reply":"2024-10-28T13:05:53.948913Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"train_data = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/train.csv\")\ntest_data = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/test.csv\")\nsample_dataset= pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv\")\n\nX = train_data.iloc[:,:-1]\ny = train_data.iloc[:,-1]\n","metadata":{"execution":{"iopub.status.busy":"2024-10-28T13:05:53.953481Z","iopub.execute_input":"2024-10-28T13:05:53.954013Z","iopub.status.idle":"2024-10-28T13:05:54.017142Z","shell.execute_reply.started":"2024-10-28T13:05:53.953959Z","shell.execute_reply":"2024-10-28T13:05:54.015981Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"numerical_columns = X.select_dtypes(include=[np.number]).columns.tolist()\ncategorical_columns = X.select_dtypes(exclude=[np.number]).columns.tolist()\n\nprint(\"\\nNumerical Columns:\")\nprint(numerical_columns)\nprint(f\"\\nTotal number of numerical columns: {len(numerical_columns)}\")\n\nprint(\"\\nCategorical Columns:\")\nprint(categorical_columns)\nprint(f\"\\nTotal number of categorical columns: {len(categorical_columns)}\")","metadata":{"execution":{"iopub.status.busy":"2024-10-28T13:05:54.018963Z","iopub.execute_input":"2024-10-28T13:05:54.019466Z","iopub.status.idle":"2024-10-28T13:05:54.030035Z","shell.execute_reply.started":"2024-10-28T13:05:54.019389Z","shell.execute_reply":"2024-10-28T13:05:54.028813Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"\nNumerical Columns:\n['Id', 'MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold']\n\nTotal number of numerical columns: 37\n\nCategorical Columns:\n['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature', 'SaleType', 'SaleCondition']\n\nTotal number of categorical columns: 43\n","output_type":"stream"}]},{"cell_type":"code","source":"def check_null_values(dataset, test_dataset):\n    train_nulls = dataset.isnull().sum()\n    test_nulls = test_dataset.isnull().sum()\n    print(f\"\\nTotal missing in train: {train_nulls.sum()}\")\n    print(f\"Total missing in test: {test_nulls.sum()}\")\n    print(\"\\nMissing columns in train dataset:\")\n    print(dataset.columns[dataset.isnull().any()].tolist())\n    print(\"\\nMissing columns in test dataset:\")\n    print(test_dataset.columns[test_dataset.isnull().any()].tolist())\n\ncheck_null_values(train_data, test_data)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-28T13:05:54.031663Z","iopub.execute_input":"2024-10-28T13:05:54.032229Z","iopub.status.idle":"2024-10-28T13:05:54.075704Z","shell.execute_reply.started":"2024-10-28T13:05:54.032186Z","shell.execute_reply":"2024-10-28T13:05:54.074519Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"\nTotal missing in train: 7829\nTotal missing in test: 7878\n\nMissing columns in train dataset:\n['LotFrontage', 'Alley', 'MasVnrType', 'MasVnrArea', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Electrical', 'FireplaceQu', 'GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence', 'MiscFeature']\n\nMissing columns in test dataset:\n['MSZoning', 'LotFrontage', 'Alley', 'Utilities', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath', 'KitchenQual', 'Functional', 'FireplaceQu', 'GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence', 'MiscFeature', 'SaleType']\n","output_type":"stream"}]},{"cell_type":"code","source":"def handle_missing_values_train(df):\n    numerical_cols = ['LotFrontage', 'MasVnrArea', 'GarageYrBlt', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', \n                      'BsmtFullBath', 'BsmtHalfBath', 'GarageCars', 'GarageArea']\n    categorical_cols = ['MasVnrType', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Electrical', \n                        'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence', \n                        'MiscFeature', 'Alley']\n    \n    for col in numerical_cols:\n        if col == 'LotFrontage':\n            df[col] = df.groupby('Neighborhood')[col].transform(lambda x: x.fillna(x.median()))\n        elif col in ['MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath', \n                     'GarageCars', 'GarageArea']:\n            df[col] = df[col].fillna(0)\n        elif col == 'GarageYrBlt':\n            df[col] = df[col].fillna(df['YearBuilt'])\n\n    for col in categorical_cols:\n        if col in ['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'MasVnrType']:\n            df[col] = df[col].fillna('None')\n        elif col in ['GarageCond', 'GarageType', 'GarageFinish', 'GarageQual']:\n            df[col] = df[col].fillna('No Garage')\n        elif col in ['BsmtFinType2', 'BsmtExposure', 'BsmtQual', 'BsmtCond', 'BsmtFinType1']:\n            df[col] = df[col].fillna('No Basement')\n        else:\n            df[col] = df[col].fillna(df[col].mode()[0])\n\n    # Additional features\n    df['TotalSF'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF']\n    df['TotalBathrooms'] = df['FullBath'] + (0.5 * df['HalfBath']) + df['BsmtFullBath'] + (0.5 * df['BsmtHalfBath'])\n    \n    return df\n","metadata":{"execution":{"iopub.status.busy":"2024-10-28T13:05:54.079193Z","iopub.execute_input":"2024-10-28T13:05:54.079764Z","iopub.status.idle":"2024-10-28T13:05:54.095006Z","shell.execute_reply.started":"2024-10-28T13:05:54.079703Z","shell.execute_reply":"2024-10-28T13:05:54.093502Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"train_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-28T13:05:54.097118Z","iopub.execute_input":"2024-10-28T13:05:54.097612Z","iopub.status.idle":"2024-10-28T13:05:54.134874Z","shell.execute_reply.started":"2024-10-28T13:05:54.097552Z","shell.execute_reply":"2024-10-28T13:05:54.133491Z"},"trusted":true},"execution_count":43,"outputs":[{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n\n  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n\n  YrSold  SaleType  SaleCondition  SalePrice  \n0   2008        WD         Normal     208500  \n1   2007        WD         Normal     181500  \n2   2008        WD         Normal     223500  \n3   2006        WD        Abnorml     140000  \n4   2008        WD         Normal     250000  \n\n[5 rows x 81 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>223500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>70</td>\n      <td>RL</td>\n      <td>60.0</td>\n      <td>9550</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2006</td>\n      <td>WD</td>\n      <td>Abnorml</td>\n      <td>140000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>84.0</td>\n      <td>14260</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>12</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>250000</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 81 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"numeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median'))\n])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('encoder', OneHotEncoder(handle_unknown='ignore', sparse_output=False))\n])\n\n# Combine preprocessing for numerical and categorical features\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numerical_columns),\n        ('cat', categorical_transformer, categorical_columns)\n    ]\n)\n\n# Define the full pipeline\npipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('model', XGBRegressor())\n])\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nX_train,X_val,y_train,y_val = train_test_split(X,y,test_size = 0.2,random_state=0)\n\n# Define the parameter grid for XGBRegressor\nparam_grid = {\n    'model__n_estimators': [100, 200, 300],\n    'model__max_depth': [3, 5, 7],\n    'model__learning_rate': [0.01, 0.1, 0.2],\n    'model__subsample': [0.8, 1.0],\n}\n\n# Initialize GridSearchCV with the pipeline and parameter grid\ngrid_search = GridSearchCV(estimator=pipeline, param_grid=param_grid, \n                           cv=5, scoring='neg_mean_squared_error', \n                           n_jobs=-1, verbose=2)\n\n# Fit the grid search on the training data\ngrid_search.fit(X_train, y_train)\n\n# Get the best parameters and model\nbest_model = grid_search.best_estimator_\nbest_params = grid_search.best_params_\n\n# Predict using the best model\ny_val_pred = best_model.predict(X_val)\n\n# Print the best parameters\nprint(\"Best parameters found: \", best_params)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-28T13:05:54.136099Z","iopub.execute_input":"2024-10-28T13:05:54.136566Z","iopub.status.idle":"2024-10-28T13:07:56.752313Z","shell.execute_reply.started":"2024-10-28T13:05:54.136495Z","shell.execute_reply":"2024-10-28T13:07:56.751217Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 54 candidates, totalling 270 fits\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.6s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.5s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   0.8s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   0.8s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.8s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.2s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.2s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   1.0s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   1.0s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.8s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.7s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.4s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.9s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   2.6s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.8s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.9s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   3.5s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   3.6s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   3.6s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   4.9s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   5.3s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.4s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.4s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.4s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.4s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.5s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.5s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   0.9s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.9s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.8s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.0s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   0.7s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   0.8s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   0.8s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.4s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.0s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.1s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   1.9s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.3s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.4s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   2.5s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   2.6s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   2.3s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   4.0s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   3.6s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.4s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.4s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.5s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.4s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.5s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.0s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.1s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   0.8s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   0.8s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.5s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.1s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   1.9s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.3s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.5s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.6s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   0.9s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.9s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.9s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.2s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.2s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   1.0s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.8s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.7s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.7s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   3.1s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   2.5s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.8s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.8s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   3.5s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   3.6s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   3.7s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   5.1s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   5.1s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.4s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.4s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.4s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.5s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   1.2s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   1.2s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.8s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.0s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   0.8s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   0.8s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   0.8s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.5s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.0s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   2.0s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   1.9s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.4s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   2.4s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   2.4s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   2.4s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   3.8s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   3.6s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.5s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.4s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.4s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.4s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   0.8s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.1s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   0.8s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.5s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.1s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   1.9s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.4s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.4s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.2s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   2.8s\nBest parameters found:  {'model__learning_rate': 0.1, 'model__max_depth': 7, 'model__n_estimators': 200, 'model__subsample': 0.8}\n","output_type":"stream"}]},{"cell_type":"code","source":"r2 = r2_score(y_val, y_val_pred)\nmae = mean_absolute_error(y_val, y_val_pred)\nmse = mean_squared_error(y_val, y_val_pred)\nrmse = np.sqrt(mse)\n\nprint(f\"R² Score: {r2}\")\nprint(f\"Mean Absolute Error (MAE): {mae}\")\nprint(f\"Mean Squared Error (MSE): {mse}\")\nprint(f\"Root Mean Squared Error (RMSE): {rmse}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-10-28T13:07:56.756937Z","iopub.execute_input":"2024-10-28T13:07:56.759995Z","iopub.status.idle":"2024-10-28T13:07:56.772605Z","shell.execute_reply.started":"2024-10-28T13:07:56.759938Z","shell.execute_reply":"2024-10-28T13:07:56.771595Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"R² Score: 0.8743852375739819\nMean Absolute Error (MAE): 16532.819750642124\nMean Squared Error (MSE): 867476702.5780333\nRoot Mean Squared Error (RMSE): 29452.957450450256\n","output_type":"stream"}]},{"cell_type":"code","source":"test_predictions = best_model.predict(test_data)\n\n# Prepare submission\nsubmission = pd.DataFrame({\n    'Id': test_data['Id'],\n    'SalePrice': test_predictions\n})\n\n# Save the submission to a CSV file\nsubmission.to_csv('submission.csv', index=False)\nprint(\"Predictions saved to submission.csv\")\n\n# Display first few rows of the submission\nabc = pd.read_csv(\"submission.csv\")\nprint(abc.head())\n","metadata":{"execution":{"iopub.status.busy":"2024-10-28T13:07:56.773875Z","iopub.execute_input":"2024-10-28T13:07:56.774338Z","iopub.status.idle":"2024-10-28T13:07:56.846756Z","shell.execute_reply.started":"2024-10-28T13:07:56.774286Z","shell.execute_reply":"2024-10-28T13:07:56.845611Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"Predictions saved to submission.csv\n     Id  SalePrice\n0  1461  139353.20\n1  1462  154970.19\n2  1463  185506.17\n3  1464  189056.52\n4  1465  189255.45\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.5s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.6s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.5s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   0.8s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.8s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.2s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.2s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   1.0s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.8s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.7s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.7s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   3.3s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   2.5s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.9s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.9s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.9s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   3.6s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   3.6s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   5.0s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   5.2s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   5.8s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.1s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   0.8s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   0.8s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.4s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.0s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   1.8s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.3s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.3s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.5s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   2.6s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   2.4s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   3.8s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   3.8s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   4.2s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.0s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.4s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.4s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.1s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.0s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   1.9s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.3s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   2.6s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   2.6s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   2.4s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   3.9s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   4.1s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.5s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, model__subsample=0.8; total time=   0.6s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=100, model__subsample=1.0; total time=   0.5s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   0.8s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.8s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.2s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.2s\n[CV] END model__learning_rate=0.01, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.2s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   1.0s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   0.9s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.7s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.7s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.8s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.7s\n[CV] END model__learning_rate=0.01, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   2.5s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.9s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.9s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.9s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   3.4s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   3.7s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   4.9s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   5.0s\n[CV] END model__learning_rate=0.01, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   5.4s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   0.9s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   0.7s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.7s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.1s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.0s\n[CV] END model__learning_rate=0.1, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   0.8s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   0.8s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.4s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.4s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.2s\n[CV] END model__learning_rate=0.1, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   1.8s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.2s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.4s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.4s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   2.7s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   2.5s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   3.8s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   3.5s\n[CV] END model__learning_rate=0.1, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   4.5s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200, model__subsample=0.8; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=200, model__subsample=1.0; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300, model__subsample=0.8; total time=   1.1s\n[CV] END model__learning_rate=0.2, model__max_depth=3, model__n_estimators=300, model__subsample=1.0; total time=   1.0s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=100, model__subsample=0.8; total time=   0.8s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   0.7s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=100, model__subsample=1.0; total time=   0.8s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=200, model__subsample=0.8; total time=   1.4s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=200, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=300, model__subsample=0.8; total time=   2.1s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   2.0s\n[CV] END model__learning_rate=0.2, model__max_depth=5, model__n_estimators=300, model__subsample=1.0; total time=   1.9s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=100, model__subsample=0.8; total time=   1.5s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   2.7s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   2.4s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   2.3s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   4.5s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   4.0s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   2.3s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   4.0s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   3.7s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   3.3s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=100, model__subsample=1.0; total time=   1.3s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=200, model__subsample=0.8; total time=   2.6s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=200, model__subsample=1.0; total time=   2.3s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   4.0s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=300, model__subsample=0.8; total time=   4.8s\n[CV] END model__learning_rate=0.2, model__max_depth=7, model__n_estimators=300, model__subsample=1.0; total time=   2.6s\n","output_type":"stream"}]}]}