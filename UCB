{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9472103,"sourceType":"datasetVersion","datasetId":5760387}],"dockerImageVersionId":30775,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/devaanshpuri/ucb-implementation?scriptVersionId=203473531\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n","metadata":{"execution":{"iopub.status.busy":"2024-10-26T10:32:58.975724Z","iopub.execute_input":"2024-10-26T10:32:58.976299Z","iopub.status.idle":"2024-10-26T10:33:00.391552Z","shell.execute_reply.started":"2024-10-26T10:32:58.976224Z","shell.execute_reply":"2024-10-26T10:33:00.390296Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dataset=pd.read_csv(\"/kaggle/input/happy/Ads_CTR_Optimisation.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-10-26T10:33:00.393967Z","iopub.execute_input":"2024-10-26T10:33:00.394828Z","iopub.status.idle":"2024-10-26T10:33:00.438662Z","shell.execute_reply.started":"2024-10-26T10:33:00.394768Z","shell.execute_reply":"2024-10-26T10:33:00.437193Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"in ucb 3 steps\n1. initialiing Ni, number of times ad was initialized in rounds n\n    initiating Ri, sum of rewards of an ad in n rounds\n2. calculate average reward = ri/ni\n   calculate confidence interval delta i = root (3log(n)/2ni)\n3. add average reward and confidence interval giving the best result\n\n\n","metadata":{}},{"cell_type":"code","source":"N=10000 #initial number of users\nd=10 #number of ads\nads_selected=[] #creation of empty list\nnumber_of_selections=[0]*d #given as the Ni.. if for eg ad 3 then the list elemet corresponding to 3 will be incremented\nsum_of_rewards=[0]*d #given as Ri\ntotal_reward=0 #initially \n\nfor n in range(0,N): #for looop 1 to iterate thru rounds \n    ad=0\n    max_upper_bound=0 #intial values\n    for i in range(0,d):#iterates thru ads to check the best\n        if(number_of_selections[i]>0): #checks if the ad with index i is checked atleast once\n            average_reward=sum_of_rewards[i]/number_of_selections[i] #step 2(a) checking for average rewards\n            delta_i=math.sqrt(3/2*math.log(n+1)/number_of_selections[i]) #log n+1 because for n = 0 itll give -infinity \n            upper_bound = average_reward+delta_i\n    else:\n        upper_bound=1e400 #sets upper bound of not selected algo till now to close to infinity\n    if(upper_bound>max_upper_bound): #also selectts ads which are not selected\n        max_upper_bound=upper_bound\n        ad=i\n    ads_selected.append(ad)\n    number_of_selections[ad]= number_of_selections[ad]+1 #increments index of ad i by 1\n    reward=dataset.values[n,ad] #updates rewards for n rounds and ad d\n    sum_of_rewards[ad]=sum_of_rewards[ad] + reward\n    total_reward= total_reward + reward\n            ","metadata":{"execution":{"iopub.status.busy":"2024-10-26T10:33:00.440625Z","iopub.execute_input":"2024-10-26T10:33:00.441645Z","iopub.status.idle":"2024-10-26T10:33:00.554252Z","shell.execute_reply.started":"2024-10-26T10:33:00.441595Z","shell.execute_reply":"2024-10-26T10:33:00.552805Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.hist(ads_selected)\nplt.show","metadata":{"execution":{"iopub.status.busy":"2024-10-26T10:33:00.557116Z","iopub.execute_input":"2024-10-26T10:33:00.557655Z","iopub.status.idle":"2024-10-26T10:33:00.945954Z","shell.execute_reply.started":"2024-10-26T10:33:00.557597Z","shell.execute_reply":"2024-10-26T10:33:00.944497Z"},"trusted":true},"execution_count":null,"outputs":[]}]}