{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":84895,"databundleVersionId":10008389,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/devaanshpuri/predicting-depression-using-mental-health-data?scriptVersionId=205156555\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Predicting Depression using Mental Health Data","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-04T12:48:12.099583Z","iopub.execute_input":"2024-11-04T12:48:12.100142Z","iopub.status.idle":"2024-11-04T12:48:12.106496Z","shell.execute_reply.started":"2024-11-04T12:48:12.100096Z","shell.execute_reply":"2024-11-04T12:48:12.105224Z"}}},{"cell_type":"markdown","source":"### importing the libraries\n","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### importing the training and testing datasets","metadata":{}},{"cell_type":"code","source":"train_dataset = pd.read_csv(\"/kaggle/input/playground-series-s4e11/train.csv\")\ntrain_dataset.drop(columns = [\"id\",\"City\",\"Name\"])\ntest_dataset = pd.read_csv(\"/kaggle/input/playground-series-s4e11/test.csv\")\ntest_dataset.drop(columns = [\"id\",\"City\",\"Name\"])\n","metadata":{"execution":{"iopub.status.busy":"2024-11-04T12:48:12.112399Z","iopub.execute_input":"2024-11-04T12:48:12.113107Z","iopub.status.idle":"2024-11-04T12:48:12.936307Z","shell.execute_reply.started":"2024-11-04T12:48:12.113054Z","shell.execute_reply":"2024-11-04T12:48:12.935038Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"train_dataset.head()","metadata":{"execution":{"iopub.status.busy":"2024-11-04T12:48:12.938463Z","iopub.execute_input":"2024-11-04T12:48:12.938868Z","iopub.status.idle":"2024-11-04T12:48:12.968332Z","shell.execute_reply.started":"2024-11-04T12:48:12.938826Z","shell.execute_reply":"2024-11-04T12:48:12.967184Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### checking for categorical features","metadata":{}},{"cell_type":"code","source":"categorical_features = train_dataset.select_dtypes(include=['object', 'category']).columns\nnum_categorical_features = len(categorical_features)\ncategorical_feature_names = list(categorical_features)\n\nprint(\"Number of categorical features:\", num_categorical_features)\nprint(\"Names of categorical features:\", categorical_feature_names)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T12:48:12.969625Z","iopub.execute_input":"2024-11-04T12:48:12.970053Z","iopub.status.idle":"2024-11-04T12:48:12.99471Z","shell.execute_reply.started":"2024-11-04T12:48:12.970011Z","shell.execute_reply":"2024-11-04T12:48:12.993683Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### checking for nulls ","metadata":{}},{"cell_type":"code","source":"def check_nulls (dataset,test):\n    train_nulls = dataset.isnull().sum()\n    print(f\"\\nTotal missing in train: {train_nulls.sum()}\")\n    print(\"\\nMissing columns in train dataset:\")\n    print(dataset.columns[dataset.isnull().any()].tolist())\n    \n    test_nulls = test.isnull().sum()\n    print(f\"\\nTotal missing in test: {test_nulls.sum()}\")\n    print(\"\\nMissing columns in train dataset:\")\n    print(test.columns[test.isnull().any()].tolist())\n    \ncheck_nulls (train_dataset,test_dataset)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T12:48:12.997771Z","iopub.execute_input":"2024-11-04T12:48:12.998164Z","iopub.status.idle":"2024-11-04T12:48:13.509826Z","shell.execute_reply.started":"2024-11-04T12:48:12.998121Z","shell.execute_reply":"2024-11-04T12:48:13.508604Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Handeling the missing values","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import LabelEncoder\n\ndef preprocess_and_encode(train_df, test_df=None):\n    train_encoded = train_df.copy()\n    categorical_columns = train_encoded.select_dtypes(include=['object']).columns\n    imputer = SimpleImputer(strategy='most_frequent')\n    train_encoded[categorical_columns] = imputer.fit_transform(train_encoded[categorical_columns])\n    le = LabelEncoder()\n    \n    for column in categorical_columns:\n        train_encoded[column] = le.fit_transform(train_encoded[column])\n\n    if test_df is not None:\n        test_encoded = test_df.copy()\n        test_encoded[categorical_columns] = imputer.transform(test_encoded[categorical_columns])\n        \n        for column in categorical_columns:\n            test_encoded[column] = le.fit_transform(test_encoded[column].astype(str))\n        \n        return train_encoded, test_encoded\n    \n    return train_encoded\n\ntrain_dataset_encoded = preprocess_and_encode(train_dataset)\n","metadata":{"execution":{"iopub.status.busy":"2024-11-04T12:48:13.511335Z","iopub.execute_input":"2024-11-04T12:48:13.511831Z","iopub.status.idle":"2024-11-04T12:48:14.317764Z","shell.execute_reply.started":"2024-11-04T12:48:13.511772Z","shell.execute_reply":"2024-11-04T12:48:14.31672Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Splitting into training and testing","metadata":{}},{"cell_type":"code","source":"X = train_dataset_encoded.iloc[:,:-1]\ny = train_dataset_encoded.iloc[:,-1]\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n","metadata":{"execution":{"iopub.status.busy":"2024-11-04T12:48:14.319006Z","iopub.execute_input":"2024-11-04T12:48:14.319359Z","iopub.status.idle":"2024-11-04T12:48:14.368308Z","shell.execute_reply.started":"2024-11-04T12:48:14.31932Z","shell.execute_reply":"2024-11-04T12:48:14.367106Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### training the model","metadata":{}},{"cell_type":"code","source":"from xgboost import XGBClassifier\nmodel = XGBClassifier(random_state=1, use_label_encoder=False, n_estimators=128)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T12:48:14.369712Z","iopub.execute_input":"2024-11-04T12:48:14.370084Z","iopub.status.idle":"2024-11-04T12:48:15.784938Z","shell.execute_reply.started":"2024-11-04T12:48:14.370045Z","shell.execute_reply":"2024-11-04T12:48:15.783927Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### evaluation ","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, classification_report\naccuracy = accuracy_score(y_test, y_pred)\nprint(f'Accuracy on validation set: {accuracy * 100:.2f}%')\n\n# Optionally print a classification report\nprint(classification_report(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-11-04T12:48:15.786543Z","iopub.execute_input":"2024-11-04T12:48:15.78726Z","iopub.status.idle":"2024-11-04T12:48:15.848025Z","shell.execute_reply.started":"2024-11-04T12:48:15.787214Z","shell.execute_reply":"2024-11-04T12:48:15.846753Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### submission","metadata":{}},{"cell_type":"code","source":"train_dataset_encoded, test_dataset_encoded = preprocess_and_encode(train_dataset, test_dataset)\ny_test_pred = model.predict(test_dataset_encoded)\n\nsubmission_df = pd.read_csv('/kaggle/input/playground-series-s4e11/sample_submission.csv')\nsubmission_df['Depression'] = y_test_pred\nsubmission_df.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-11-04T12:48:15.849478Z","iopub.execute_input":"2024-11-04T12:48:15.849993Z","iopub.status.idle":"2024-11-04T12:48:17.34834Z","shell.execute_reply.started":"2024-11-04T12:48:15.849938Z","shell.execute_reply":"2024-11-04T12:48:17.347163Z"},"trusted":true},"execution_count":null,"outputs":[]}]}